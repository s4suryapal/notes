apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // ðŸ“¦ Bundle optimizations for smaller app size
    enableBundleCompression = true                   // Enable compression
    hermesFlags = ["-O", "-output-source-map"]       // Optimize Hermes bytecode

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true in release builds to optimize the app using [R8](https://developer.android.com/topic/performance/app-optimization/enable-app-optimization).
 */
def enableMinifyInReleaseBuilds = (findProperty('android.enableMinifyInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.notesai.easynotes.ai.smart.notepad.ocr.docscanner.privatenotes'
    defaultConfig {
        applicationId 'com.notesai.easynotes.ai.smart.notepad.ocr.docscanner.privatenotes'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        buildConfigField "String", "REACT_NATIVE_RELEASE_LEVEL", "\"${findProperty('reactNativeReleaseLevel') ?: 'stable'}\""

        // ðŸ“¦ Vector drawable support for smaller image assets
        vectorDrawables {
            useSupportLibrary = true
            generatedDensities = []
        }
    }

    buildFeatures {
        buildConfig = true
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // Disable minification and shrinking in debug builds for faster compilation
            minifyEnabled false
            shrinkResources false
            debuggable true
        }
        release {
            // ðŸ“¦ For production builds with smaller app size, enable these:
            signingConfig signingConfigs.debug
            minifyEnabled true           // Enable R8 code shrinking
            shrinkResources true         // Enable resource shrinking
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro", "proguard-memory-optimize.pro"
            zipAlignEnabled true         // Optimize APK alignment

            // Additional size optimizations
            debuggable false             // Remove debug info
        }
    }

    // ðŸ“¦ MAJOR SIZE REDUCTION: Split APK by CPU architecture (reduces size by ~50%)
    splits {
        abi {
            reset()
            enable true
            universalApk false  // Don't generate universal APK
            include "armeabi-v7a", "arm64-v8a"  // Only common architectures
        }
    }

    packagingOptions {
        jniLibs {
            def enableLegacyPackaging = findProperty('expo.useLegacyPackaging') ?: 'false'
            useLegacyPackaging enableLegacyPackaging.toBoolean()

            // ðŸ“¦ Pick first for duplicate native libraries
            pickFirsts += ['**/libc++_shared.so', '**/libfbjni.so']
        }

        // ðŸ“¦ Exclude unnecessary files to reduce app size
        excludes += [
            '**/OWNERS',
            '**/CONTRIBUTORS',
            '**/LICENSE',
            '**/LICENSE.txt',
            '**/NOTICE',
            '**/NOTICE.txt',
            '**/CHANGELOG',
            '**/README',
            '**/README.md',
            'META-INF/maven/**',
            'META-INF/proguard/**',
            'META-INF/*.kotlin_module',
            'META-INF/*.version'
        ]
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
        // ðŸ“¦ Keep selective no-compress to avoid unnecessary APK bloat
        noCompress 'pak', 'dat', 'bin'              // Only if these exist in assets
    }

    // ðŸ“¦ Bundle configuration for smaller app size
    bundle {
        language {
            enableSplit = true      // Split by language
        }
        density {
            enableSplit = true      // Split by screen density
        }
        abi {
            enableSplit = true      // Split by CPU architecture
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // MMKV for fast key-value storage (used by call-end screen to read notes)
    implementation 'com.tencent:mmkv:1.3.1'

    // Material Components for TabLayout, Tabs, etc.
    implementation 'com.google.android.material:material:1.11.0'

    // ViewPager2 for tab swiping
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    // RecyclerView (usually included in React Native but explicit for native fragments)
    implementation 'androidx.recyclerview:recyclerview:1.3.2'

    // Fragment support
    implementation 'androidx.fragment:fragment-ktx:1.6.2'

    // Firebase BoM and Firebase AI Logic SDK for Android (Gemini via Google AI)
    implementation(platform("com.google.firebase:firebase-bom:34.3.0"))
    implementation("com.google.firebase:firebase-ai")
    // Firebase Remote Config for native flags (use non-KTX for broader compatibility)
    implementation("com.google.firebase:firebase-config")
    // Google Mobile Ads Lite SDK (smaller size, no mediation)
    implementation("com.google.android.gms:play-services-ads-lite:23.2.0") {
        exclude group: 'com.google.android.gms', module: 'play-services-ads-api'
    }
    // Shimmer effect for banner loading placeholders (used in native layout)
    implementation("com.facebook.shimmer:shimmer:0.5.0")
    // Lifecycle for App Open Ads (used by AppOpenAdManager via ProcessLifecycleOwner)
    implementation("androidx.lifecycle:lifecycle-process:2.6.2")
}

// ðŸ“¦ Force AdMob Lite version and prevent conflicts
configurations.all {
    resolutionStrategy {
        // Force all dependencies to use AdMob Lite 23.2.0
        force 'com.google.android.gms:play-services-ads-lite:23.2.0'

        // Exclude the full AdMob SDK that conflicts with Lite
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.google.android.gms') {
                if (details.requested.name == 'play-services-ads') {
                    details.useTarget group: 'com.google.android.gms', name: 'play-services-ads-lite', version: '23.2.0'
                }
                if (details.requested.name == 'play-services-ads-api' && details.requested.version == '24.6.0') {
                    // Exclude newer incompatible version
                    details.useTarget group: 'com.google.android.gms', name: 'play-services-ads-lite', version: '23.2.0'
                }
            }
        }
    }
}
